package com.bellavita.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.bellavita.entity.Address;
import com.bellavita.entity.Users;
import com.bellavita.exceptions.OperationFaliureException;
import com.bellavita.exceptions.UserNotLoggedInException;
import com.bellavita.service.UsersServices;

import jakarta.validation.Valid;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@RestController
@RequestMapping("/users")
public class UsersController {
	
private UsersServices uservice;
private PasswordEncoder pencoder;


	@Autowired
    public void setPencoder(PasswordEncoder pencoder) {
	this.pencoder = pencoder;
}


	@Autowired
	public void setUservice(UsersServices uservice) {
	this.uservice = uservice;
}


	/**
	 * This controller is used for signup with validated data
	 *  Users: {
	 *         Integer usreId; --  It will be automatically generated by db system
	 *         String firstName, -- This is mandatory field
	 *         String lastName,
	 *         String email,    -- This is mandatory field
	 *         String password,  -- This is mandatory
	 *         LocalDateTime createdAt,  -- It will be automatically generated by internal services
	 *         UserStatus status,         -- It will be automaically generated by internal services
	 *         String role,     --  (admin, user)  and this field is mandatory 
	 *         String location,  -- This field is mandatory
	 *         orders:[],    -- List of orders and here it shows one to many relationship among users and orders
	 *         transactions:[], -- Set of transactions and here it shows one to many relationship among users and transactions
	 *         Address:[]   -- List of addresses and here users and Address are connected in has-a relationship
	 *      } 
	 *      
	 *      
     *
	 *	^[A-Z][a-z]+[!@#$%^&*()_+{}|;':",.<>?/`~\-=[\]\\;'./A-Za-z0-9]{7,}$
	 *   Password regex	Explanation:
     *		
		^: Asserts the start of the string.
		[A-Z]: Requires the first character to be an uppercase letter.
		[a-z]+: Requires one or more lowercase letters.
		[!@#$%^&*()_+{}|;':",.<>?/~-=[]\;'./A-Za-z0-9]{7,}`: Allows at least 7 characters, including special characters from the specified set and any combination of uppercase letters, lowercase letters, and digits.
		$: Asserts the end of the string.
	 * @param Users user
	 * @return Returns Users object
	 */
	@PostMapping("/signUp")
	public ResponseEntity<Users> signUp(@Valid @RequestBody  Users user){
		
		log.info("User signup started...");
		user.setPassword(pencoder.encode(user.getPassword()));
		
		Users res=null;
		if(user.getRole().equalsIgnoreCase("user"))
			res= uservice.userSignUp(user);
		else if(user.getRole().equalsIgnoreCase("admin"))
			 res= uservice.adminSignUp(user);
		else
			throw new OperationFaliureException("Some thing went wrong ,Please try again");
		
		log.info("User signup is successful and User account created");
		
	    return new ResponseEntity<>(res,HttpStatus.CREATED);	
	}
	
	
	
	
	/**
	 * This controller takes username and password inside authentication object and then pass it futher for varification
	 * After varification jwt token will be provided inside resoponse headers and that token will be needed  for further callings of controllers
	 * @author Ankit Choubey
	 * @param Authentication auth
	 * @return Return a string says(user login successfully)
	 */
	@GetMapping("/signIn")
	public ResponseEntity<String> getLoginDetails(Authentication auth){
		log.info("user login started...");

		
		Users user= uservice.getUserDetails(auth.getName());
		String res= user.getFirstName()+" "+user.getLastName()+" "+"Logged in Successfully";
		
		log.info(user.getFirstName()+"  login successfully");
		return new ResponseEntity<>(res,HttpStatus.ACCEPTED);
			
	}
	
//	
//    @GetMapping("/testing")
//    public ResponseEntity<String> testMethod(){
//    	return new ResponseEntity<>("Welcome User",HttpStatus.ACCEPTED);
//    }
//    
	
	
	
	
	/**
	 * This controller is used to get current loged user details and and dont't need to pass any parameter explicitly for calling it
	 * User details will be passed from authentication object  
	 * @param Authentication auth
	 * @return Returns current loged user details
	 */
	@GetMapping("/logged/user")
	public ResponseEntity<Users> getUser(Authentication auth){
		log.info("Controller for getting current user details started...");
		if(auth ==null)
			  throw new UserNotLoggedInException("Sorry you are not log in,Please login first");
		
		Users user= uservice.getUserDetails(auth.getName());
		log.info("Controller response , User details found successfully");
	
		return new ResponseEntity<>(user ,HttpStatus.ACCEPTED);
	}
	
	
	
	
	/**
	 * This contoller is using email to get the user details 
	 * Here email will be passed as path variable
	 * @param String email
	 * @return Return user object
	 */
	@GetMapping("/user/{uemail}")
	public ResponseEntity<Users> getUserdetails(@PathVariable("uemail") String email){
		log.info("Controller for getting user details started...");
		
		Users user= uservice.getUserDetails(email);
		
		log.info("Controller response user found successfully");
	
		return new ResponseEntity<>(user ,HttpStatus.ACCEPTED);
	}
	
	
	
	
	/**
	 * This controller is used to get all the users details
	 * It takes four arguments which are field,direction,pageno and number of records .
	 *  here field is the name of field which is going to be used as a sorting criteria
	 *  direction takes two values : asc and desc 
	 *   asc= ascending, desc=descending
	 *  pageno shows which page we want to get after request and records shows number of records in one page.
	 *  default values : field= createdAt(time),direction=desc, pageno= 1,records=10
	 * @param String field
	 * @param String direction
	 * @param Integer pageno
	 * @param Integer records
	 * @return  Returns list of users (List<Users>)
	 */
	@GetMapping("/users")
	public ResponseEntity<List<Users>> getAllUser(@RequestParam( value= "field",required=false) String field, @RequestParam( value= "dir" ,required=false) String direction , @RequestParam( value="pageno", required=false) Integer pageno, @RequestParam( value="records" , required=false) Integer records){
		log.info("Cotroller for getting all users started...");
		List<Users> list = uservice.getAllSortedwithFieldUsers(field, direction,pageno,records);
		
	   log.info("Controller response , All users found successfully");
		
		return new ResponseEntity<>(list,HttpStatus.OK);
	} 
	
	
	
	
	
	/**
	 * This controller is used to change the status of the user account and it should be valid status or else it will throw and exception
	 * The valid status for an user are : Active,Inactive,Deactivated_by_user
	 * @param String email
	 * @param String status
	 * @return Returns object of the user with modified status
	 */
	@PatchMapping("/user/status")
	public ResponseEntity<Users> changeStatus(@RequestParam("uemail") String email, @RequestParam("ustatus") String status){
		
		log.info("Controller for changing user status started...");
		Users user= uservice.changeStatus(email, status);
		log.info("Controller response, User status changed successfully");
		return new ResponseEntity<>(user,HttpStatus.ACCEPTED);
	}
	
	
	
	
//	@PatchMapping("/user/logged/deactivate")
//	public ResponseEntity<String> deactivateAccountByUser(Authentication auth)
//	{
//		if(auth.getName()==null)
//			  throw new UserNotLoggedInException("Sorry you are not log in,Please login first");
//		
//		String res= uservice.deactivateAccount(auth.getName());
//		
//		return new ResponseEntity<>(res,HttpStatus.ACCEPTED);
//	}
	
	
	
	
	/**
	 * This controller is used to get all the saved addresses for a  user using user email and firstName
	 * Here we are two request param  :  ueamil,fname which we need to pass while calling this endpoint
	 * These are mandatory request params
	 * @param String ueamil
	 * @param String fname
	 * @return Returns the list of all addresses in the form of list of address type (List<Address>)
	 */
	@GetMapping("/addresses")
	public ResponseEntity<List<Address>> getAddresses(@RequestParam("ueamil") String ueamil,@RequestParam("fname") String fname ){
		log.info("Controller for getting all the addresses started...");
		List<Address> list = uservice.getAllAddress(ueamil,fname);
		log.info("Controller responcse , All addresses found successfully");
		return new ResponseEntity<>(list,HttpStatus.ACCEPTED);
	}
	
	
	/**
	 * This controller is used to add address in the current logged user account
	 * Here Three parameter is used which are authentication auth,Address adob,String adType;
	 * Authentication will be implemented internally and don't need to pass this from client side
	 * Address object contains details about use address and it will be passed from client side as requestBody 
	 *    Address : {
	 *               name :"String",
	 *               hno_street_area:"String",
	 *               state:"String",
	 *               city:"String",
	 *               pincode:"String",
	 *               phoneNO:"String"
	 *               }
	 *               
	 * Here addressType will be passed as string from client side and will be fetch to address object internally and Request param value for address :  "type"
	 * Valid Address type : HOME,OFFICE,OTHER;
	 * @param Authentication  auth
	 * @param String address
	 * @param String addressType
	 * @return Returns Address object 
	 */
	@PostMapping("/add/address")
	public ResponseEntity<Address> addAdress(@Valid  Authentication auth,@RequestBody  Address address,@RequestParam("type") String addressType){
		log.info("Controller for adding address started...");
		String uemail= auth.getName();
		if(uemail==null)
			 throw new UserNotLoggedInException("You are not logged in ,Please login first");
		
		Address res= uservice.addAddress(uemail, address, addressType);
		log.info("Controller response , Address added successfully");
		return new ResponseEntity<>(res,HttpStatus.ACCEPTED);
	}
	
	
	
	
}
